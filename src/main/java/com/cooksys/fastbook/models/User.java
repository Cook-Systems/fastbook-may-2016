package com.cooksys.fastbook.models;

// Generated May 5, 2016 8:24:55 AM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "fastbook", uniqueConstraints = @UniqueConstraint(columnNames = "password"))
public class User implements java.io.Serializable {

	private Integer id;
	private String firstName;
	private String lastName;
	private String email;
	private String password;
	private Date birthDate;
	private Date joinDate;
	
	@JsonIgnore
	private Like like;
	
	@JsonIgnore
	private Set<Friend> friendsForSentId = new HashSet<Friend>(0);
	
	@JsonIgnore
	private Set<Friend> friendsForReceivedId = new HashSet<Friend>(0);
	
	@JsonIgnore
	private Set<GroupUser> groupUsers = new HashSet<GroupUser>(0);
	
	@JsonIgnore
	private Set<Post> posts = new HashSet<Post>(0);
	
	@JsonIgnore
	private Set<Post> likedPosts = new HashSet<Post>(0);

	public User()
	{
	}

	public User(String firstName, String lastName, String email,
			String password, Date birthDate, Date joinDate)
	{
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.birthDate = birthDate;
		this.joinDate = joinDate;
	}

	public User(String firstName, String lastName, String email,
			String password, Date birthDate, Date joinDate,
			Set<Friend> friendsForSentId, Set<Friend> friendsForReceivedId,
			Set<GroupUser> groupUsers, Like like, Set<Post> posts,
			Set<Post> likedPosts)
	{
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.birthDate = birthDate;
		this.joinDate = joinDate;
		this.friendsForSentId = friendsForSentId;
		this.friendsForReceivedId = friendsForReceivedId;
		this.groupUsers = groupUsers;
		this.like = like;
		this.posts = posts;
		this.likedPosts = likedPosts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId()
	{
		return this.id;
	}

	public void setId(Integer id)
	{
		this.id = id;
	}

	@Column(name = "first_name", nullable = false, length = 45)
	public String getFirstName()
	{
		return this.firstName;
	}

	public void setFirstName(String firstName)
	{
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 45)
	public String getLastName()
	{
		return this.lastName;
	}

	public void setLastName(String lastName)
	{
		this.lastName = lastName;
	}

	@Column(name = "email", nullable = false, length = 100)
	public String getEmail()
	{
		return this.email;
	}

	public void setEmail(String email)
	{
		this.email = email;
	}

	@Column(name = "password", unique = true, nullable = false, length = 60)
	public String getPassword()
	{
		return this.password;
	}

	public void setPassword(String password)
	{
		this.password = password;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birth_date", nullable = false, length = 10)
	public Date getBirthDate()
	{
		return this.birthDate;
	}

	public void setBirthDate(Date birthDate)
	{
		this.birthDate = birthDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "join_date", nullable = false, length = 19)
	public Date getJoinDate()
	{
		return this.joinDate;
	}

	public void setJoinDate(Date joinDate)
	{
		this.joinDate = joinDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userBySentId")
	public Set<Friend> getFriendsForSentId()
	{
		return this.friendsForSentId;
	}

	public void setFriendsForSentId(Set<Friend> friendsForSentId)
	{
		this.friendsForSentId = friendsForSentId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByReceivedId")
	public Set<Friend> getFriendsForReceivedId()
	{
		return this.friendsForReceivedId;
	}

	public void setFriendsForReceivedId(Set<Friend> friendsForReceivedId)
	{
		this.friendsForReceivedId = friendsForReceivedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<GroupUser> getGroupUsers()
	{
		return this.groupUsers;
	}

	public void setGroupUsers(Set<GroupUser> groupUsers)
	{
		this.groupUsers = groupUsers;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
	public Like getLike()
	{
		return this.like;
	}

	public void setLike(Like like)
	{
		this.like = like;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "post_user", catalog = "fastbook", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "post_id", nullable = false, updatable = false) })
	public Set<Post> getPosts()
	{
		return this.posts;
	}

	public void setPosts(Set<Post> posts)
	{
		this.posts = posts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Post> getLikedPosts()
	{
		return this.likedPosts;
	}

	public void setLikedPosts(Set<Post> likedPosts)
	{
		this.likedPosts = likedPosts;
	}

}
